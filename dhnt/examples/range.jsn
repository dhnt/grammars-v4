/*
    range.jsn

    flow control operations
*/
{
    int: 0,
    null: 0a,
    boolean: 0b,
    ranger: () :int, :_ {},

    //custom range iterators
    //
    //iterate once
    if: (b :boolean) :ranger {
        done := 0b;

        <<- () :int, :boolean {
            done || !b # <<- null

            done = 1b;

            <<- 0, b;
        }
    },
    //
    for: (init :int, upper :int, step :int) :ranger {
        i, v := init, init;

        <<- () :int, :int {
            i > upper # <<- null

            i += 1;
            v += step;
            <<- i, v;
        }
    },
    forever: () :ranger {
        i := 0;
        <<- () :int, :int {
            i +=1;
            <<- i, 0;
        }
    },

    main: () {
        a, b := 1, 2;

        //if then

        (a > b) # {
          print(a);
        }

        if (a > b) # {
            print(b);
        }

        // if then else
        (a > b) # {
            print(a),
            print(b)
        }

        if (a > b) # {
            print(a), print(b)
        }

        //ternary operation
        max = (a, b) {(a >= b) # {a, b}}
        min = ("a":_, "b":_) { <<- ($"a" <= $"b") # {$"a", $"b"}}

        m = max(x, y)
        m = min(1000, 0.12)

        // or
        (a < y) # {
            true: a,
            false: {
                b;
                c
                d
                }
        }
        (a != y) # {
            a,
            { b; c; d}
        }

        //switch case
        arr := [a, b, c];

        (arr) # (v) {
            a: {
                x
            },
            b: y,
            c: z
        }

        //for
        (list) # (k,v){
            key = k;
            value = v;
        }

        for (0, 1000, 1) # (i,v) {

        }

        //while true
        _ # {
            a = 1;
            x;
            y
        }

        forever # {

        }

        //functional labels
        _ # (v) {
            (f(v)) : {},
            (g(v)) : {},
            (v > x) : {}
        }
    }
}